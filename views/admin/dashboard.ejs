<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>管理员仪表板</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        h1, h2 {
            color: #333;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .section {
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
        }
        button:hover {
            background-color: #45a049;
        }
        form {
            margin-top: 20px;
        }
        input[type="text"], input[type="email"], input[type="number"], input[type="password"], select {
            width: 100%;
            padding: 8px;
            margin: 5px 0;
            display: inline-block;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        /* 编辑积分输入框宽度设置为50% */
        input[type="number"][id^="edit-points-"] {
            width: 50%;
        }
        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            .section {
                width: 100%;
            }
            table {
                font-size: 14px;
            }
            th, td {
                padding: 8px 5px;
            }
            button {
                padding: 8px 12px;
                font-size: 12px;
            }
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid #ddd;
            background-color: #f1f1f1;
        }
        .tab.active {
            background-color: #fff;
            border-bottom: none;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .search-box {
            margin-bottom: 20px;
        }
        .search-box input[type="text"] {
            width: 70%;
            padding: 8px;
            margin-right: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .search-box button {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .search-box button:hover {
            background-color: #45a049;
        }
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 200px;
            background-color: #2c3e50;
            padding: 20px 0;
            color: white;
            flex-shrink: 0;
        }

        .main-content {
            flex: 1;
            padding: 20px;
            background-color: #f4f4f4;
        }

        .tabs {
            display: flex;
            flex-direction: column;
            margin-bottom: 0;
        }

        .tab {
            padding: 15px 20px;
            cursor: pointer;
            border: none;
            background-color: transparent;
            color: #ecf0f1;
            text-align: left;
            transition: background-color 0.3s;
            border-left: 4px solid transparent;
        }

        .tab:hover {
            background-color: #34495e;
        }

        .tab.active {
            background-color: #34495e;
            border-left: 4px solid #3498db;
            color: #3498db;
        }

        .logo-area {
            padding: 20px;
            margin-bottom: 20px;
            text-align: center;
            border-bottom: 1px solid #34495e;
        }

        .logo-area h1 {
            margin: 0;
            font-size: 1.5em;
            color: white;
        }

        @media (max-width: 768px) {
            .dashboard-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                padding: 10px 0;
            }

            .tabs {
                flex-direction: row;
                overflow-x: auto;
            }

            .tab {
                padding: 10px 15px;
                border-left: none;
                border-bottom: 4px solid transparent;
            }

            .tab.active {
                border-left: none;
                border-bottom: 4px solid #3498db;
            }
        }
        /* 更新和新增以下样式 */
        @media (max-width: 768px) {
            body {
                padding: 0;
            }

            .dashboard-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                padding: 10px 0;
                position: fixed;
                top: 0;
                z-index: 1000;
            }

            .logo-area {
                padding: 10px;
                margin-bottom: 0;
            }

            .logo-area h1 {
                font-size: 1.2em;
            }

            .tabs {
                flex-direction: row;
                overflow-x: auto;
                white-space: nowrap;
                -webkit-overflow-scrolling: touch;
                padding: 0 10px;
            }

            .tab {
                padding: 10px 15px;
                border-left: none;
                border-bottom: 3px solid transparent;
                font-size: 14px;
            }

            .tab.active {
                border-left: none;
                border-bottom: 3px solid #3498db;
            }

            .main-content {
                margin-top: 100px; /* 为固定定位的侧边栏留出空间 */
                padding: 10px;
            }

            /* 表格响应式处理 */
            table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }

            th, td {
                padding: 6px;
                font-size: 12px;
            }

            /* 搜索框响应式处理 */
            .search-box {
                display: flex;
                gap: 10px;
                margin-bottom: 15px;
            }

            .search-box input[type="text"] {
                flex: 1;
                width: auto;
            }

            /* 表单响应式处理 */
            form {
                padding: 10px;
            }

            input[type="text"], 
            input[type="email"], 
            input[type="number"], 
            input[type="password"], 
            select {
                font-size: 16px; /* 防止 iOS 自动缩放 */
            }

            /* 按钮响应式处理 */
            button {
                padding: 8px 12px;
                font-size: 14px;
                white-space: nowrap;
            }

            /* 分页控件响应式处理 */
            .pagination {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 10px;
                margin: 15px 0;
            }

            #currentPage {
                font-size: 14px;
            }

            /* 内容管理表格的特殊处理 */
            #contentTable td {
                max-width: 200px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: normal;
            }
            #contentTable td:nth-child(2), /* 简介列 */
            #contentTable td:nth-child(3), /* 位置列 */
            #contentTable td:nth-child(4) { /* 区域列 */
                max-width: 150px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            #contentTable img {
                max-width: 60px;
                max-height: 60px;
            }

            /* 操作按钮的响应式处理 */
            td button {
                margin: 2px;
                padding: 6px 10px;
                font-size: 12px;
            }

            /* 添加用户表单的响应式处理 */
            #addUserForm {
                margin-top: 15px;
                padding: 15px;
                background: white;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            #addUserForm h3 {
                margin-top: 0;
                font-size: 16px;
            }

            /* 标题响应式处理 */
            h2 {
                font-size: 1.5em;
                margin: 10px 0;
            }

            .stats-container { padding: 20px; }
            .chart-container { height: 300px; margin-bottom: 30px; }
            .metrics-card { margin-bottom: 20px; }
            .table th { cursor: pointer; }
        }

        /* 针对特小屏幕的额外优化 */
        @media (max-width: 480px) {
            .tab {
                padding: 8px 12px;
                font-size: 12px;
            }

            .logo-area h1 {
                font-size: 1em;
            }

            td, th {
                padding: 6px;
                font-size: 12px;
            }

            .main-content {
                margin-top: 90px;
            }

            /* 简化表格内容显示 */
            #contentTable td:nth-child(2), /* 简介列 */
            #contentTable td:nth-child(4), /* 位置列 */
            #contentTable td:nth-child(6) { /* 区域列 */
                max-width: 100px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
        }

        /* 添加滚动条美化 */
        .tabs::-webkit-scrollbar {
            height: 4px;
        }

        .tabs::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .tabs::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 2px;
        }

        .tabs::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div class="logo-area">
                <h1>管理后台</h1>
            </div>
            <div class="tabs">
                <div class="tab active" onclick="openTab(event, 'users')">
                    <i class="fas fa-users"></i> 用户管理
                </div>
                <div class="tab" onclick="openTab(event, 'content')">
                    <i class="fas fa-file-alt"></i> 内容管理
                </div>
                <div class="tab" onclick="openTab(event, 'orders')">
                    <i class="fas fa-shopping-cart"></i> 订单管理
                </div>
                <div class="tab" onclick="openTab(event, 'statistics')">
                    <i class="fas fa-chart-line"></i> 数据统计
                </div>
            </div>
        </div>

        <div class="main-content">
            <div id="users" class="tab-content active">
                <h2>用户管理</h2>
                <div class="search-box">
                    <input type="text" id="userSearchInput" placeholder="输入用户名搜索">
                    <button onclick="searchUsers()">搜索</button>
                </div>
                <div style="overflow-x: auto;">
                    <table id="userTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>用户名</th>
                                <th>角色</th>
                                <th>积分</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- 用户数据将通过 JavaScript 动态加载 -->
                        </tbody>
                    </table>
                </div>
                <div id="userPagination" class="pagination">
                    <button id="prevPage">上一页</button>
                    <span id="currentPage"></span>
                    <button id="nextPage">下一页</button>
                </div>
                <form id="addUserForm">
                    <h3>添加新用户</h3>
                    <input type="text" id="username" placeholder="用户名" required>
                    <select id="role" required>
                        <option value="">选择角色</option>
                        <option value="user">普通用户</option>
                        <option value="admin">管理员</option>
                    </select>
                    <input type="password" id="password" placeholder="密码" required>
                    <input type="submit" value="添加用户">
                </form>
            </div>

            <div id="content" class="tab-content">
                <h2>内容管理</h2>
                <div class="mb-3">
                    <a href="/admin/content/add" class="btn btn-primary">
                        <i class="fas fa-plus"></i> 添加内容
                    </a>
                </div>
                <table id="contentTable" class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>简介</th>
                            <th>位置</th>
                            <th>面积</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- 内容将通过 JavaScript 动态加载 -->
                    </tbody>
                </table>
            </div>

            <div id="orders" class="tab-content">
                <h2>订单管理</h2>
                <div style="overflow-x: auto;">
                    <table id="orderTable">
                        <thead>
                            <tr>
                                <th>订单ID</th>
                                <th>用户</th>
                                <th>内容ID</th>
                                <th>创建时间</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- 订单数据将通过 JavaScript 动态加载 -->
                        </tbody>
                    </table>
                </div>
            </div>

            <div id="statistics" class="tab-content">
                <h2>数据统计</h2>
                
                <!-- 趋势图 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>访问量趋势（最近7天）</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="trendChart"></canvas>
                    </div>
                </div>

                <!-- 日期选择器 -->
                <div class="row mb-4">
                    <div class="col">
                        <input type="date" class="form-control" id="dateSelector" 
                               onchange="updateStats(this.value)">
                    </div>
                </div>

                <!-- 当日指标卡片 -->
                <div class="row mb-4" id="metricsCards">
                    <!-- 将通过 JavaScript 动态填充 -->
                </div>

                <!-- 用户行为表格 -->
                <div class="card">
                    <div class="card-header">
                        <h4>用户行为明细</h4>
                    </div>
                    <div class="card-body">
                        <table class="table" id="statsTable">
                            <thead>
                                <tr>
                                    <th>用户名</th>
                                    <th onclick="sortStats('view_home')">首页访问</th>
                                    <th onclick="sortStats('view_detail')">详情查看</th>
                                    <th onclick="sortStats('sort_content')">内容排序</th>
                                    <th onclick="sortStats('purchase')">购买行为</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- 将通过 JavaScript 动态填充 -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
        let currentPage = 1;
        const itemsPerPage = 20;

        // 修改加载用户数据的函数
        function loadUsers(page = 1, searchTerm = '') {
            fetch(`/admin/users?page=${page}&limit=${itemsPerPage}&search=${encodeURIComponent(searchTerm)}`)
                .then(response => response.json())
                .then(data => {
                    const { users, totalPages } = data;
                    const tbody = document.querySelector('#userTable tbody');
                    tbody.innerHTML = '';
                    users.forEach(user => {
                        tbody.innerHTML += `
                            <tr>
                                <td>${user.id}</td>
                                <td>${user.username}</td>
                                <td>${user.role}</td>
                                <td id="points-container-${user.id}">
                                    <span class="points-value">${user.points}</span>
                                    <input type="number" class="points-input" id="edit-points-${user.id}" 
                                           style="display: none;" value="${user.points}" min="0">
                                    <button class="btn btn-sm btn-primary edit-points-btn" 
                                            onclick="editPoints('${user.id}')">
                                        <i class="fas fa-edit"></i> 编辑
                                    </button>
                                    <button class="btn btn-sm btn-success save-points-btn" 
                                            onclick="savePoints('${user.id}')" style="display: none;">
                                        <i class="fas fa-save"></i> 保存
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-danger" onclick="deleteUser(${user.id})">
                                        <i class="fas fa-trash"></i> 删除
                                    </button>
                                </td>
                            </tr>
                        `;
                    });

                    // 更新分页控件
                    document.getElementById('currentPage').textContent = `第 ${page} 页，共 ${totalPages} 页`;
                    document.getElementById('prevPage').disabled = page <= 1;
                    document.getElementById('nextPage').disabled = page >= totalPages;
                    currentPage = page;
                })
                .catch(error => console.error('Error loading users:', error));
        }

        // 添加分页事件监听器
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                const searchTerm = document.getElementById('userSearchInput').value.trim();
                loadUsers(currentPage - 1, searchTerm);
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            const searchTerm = document.getElementById('userSearchInput').value.trim();
            loadUsers(currentPage + 1, searchTerm);
        });

        // 编辑积分
        function editPoints(userId) {
            const container = document.getElementById(`points-container-${userId}`);
            if (container) {
                const pointsSpan = container.querySelector('.points-value');
                const pointsInput = container.querySelector('.points-input');
                const editButton = container.querySelector('.edit-points-btn');
                const saveButton = container.querySelector('.save-points-btn');

                if (pointsSpan) pointsSpan.style.display = 'none';
                if (pointsInput) pointsInput.style.display = 'inline';
                if (editButton) editButton.style.display = 'none';
                if (saveButton) saveButton.style.display = 'inline';
            }
        }

        // 保存积分
        function savePoints(userId) {
            const pointsInput = document.getElementById(`edit-points-${userId}`);
            const points = parseInt(pointsInput.value);

            if (isNaN(points) || points < 0) {
                alert('请输入有效的积分数值');
                return;
            }

            fetch(`/admin/users/${userId}/points`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ points: points }),
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => Promise.reject(err));
                }
                return response.json();
            })
            .then(data => {
                // 找到包含积分编辑元素的父容器
                const pointsContainer = document.getElementById(`points-container-${userId}`);
                if (pointsContainer) {
                    const pointsSpan = pointsContainer.querySelector('.points-value');
                    const pointsInput = pointsContainer.querySelector('.points-input');
                    const editButton = pointsContainer.querySelector('.edit-points-btn');
                    const saveButton = pointsContainer.querySelector('.save-points-btn');

                    if (pointsSpan) pointsSpan.textContent = points;
                    if (pointsSpan) pointsSpan.style.display = 'inline';
                    if (pointsInput) pointsInput.style.display = 'none';
                    if (editButton) editButton.style.display = 'inline';
                    if (saveButton) saveButton.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('更新积分时发生错误:', error);
                alert('更新积分失败: ' + (error.error || error.message || '未知错误'));
            });
        }

        // 删除用户
        function deleteUser(id) {
            if (confirm('确定要删除这个用户吗？')) {
                fetch(`/admin/users/${id}`, { method: 'DELETE' })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert('用户删除成功');
                        loadUsers();
                    })
                    .catch(error => {
                        alert('删除用户失败: ' + (error.error || '未知错误'));
                    });
            }
        }

        // 删除内容
        function deleteContent(id) {
            if (confirm('确定要删除这个内容吗？')) {
                fetch(`/admin/content/${id}`, { method: 'DELETE' })
                    .then(() => loadContent());
            }
        }

        // 添加用户
        document.getElementById('addUserForm').onsubmit = function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const role = document.getElementById('role').value;
            const password = document.getElementById('password').value;
            fetch('/admin/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, role, password })
            }).then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    loadUsers();
                    this.reset();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('添加用户失败');
            });
        };

        // 添加新的函数用于加载订单
        function loadOrders() {
            fetch('/admin/orders')
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector('#orderTable tbody');
                    tbody.innerHTML = '';
                    if (data.orders && Array.isArray(data.orders) && data.orders.length > 0) {
                        data.orders.forEach(order => {
                            tbody.innerHTML += `
                                <tr>
                                    <td>${order.id}</td>
                                    <td>${order.User ? order.User.username : 'N/A'}</td>
                                    <td>${order.Content ? order.Content.id : 'N/A'}</td>
                                    <td>${new Date(order.createdAt).toLocaleString()}</td>
                                    <td>
                                        <button onclick="deleteOrder(${order.id})">删除</button>
                                    </td>
                                </tr>
                            `;
                        });
                    } else {
                        tbody.innerHTML = '<tr><td colspan="5">暂无订单数据</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('Error loading orders:', error);
                    const tbody = document.querySelector('#orderTable tbody');
                    tbody.innerHTML = '<tr><td colspan="5">加载订单数据失败</td></tr>';
                });
        }

        // 删除订单
        function deleteOrder(id) {
            if (confirm('确定要删除这个订单吗？')) {
                fetch(`/admin/orders/${id}`, { method: 'DELETE' })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert('订单删除成功');
                        loadOrders();
                    })
                    .catch(error => {
                        console.error('删除失败:', error);
                        alert('删除订单失败: ' + (error.error || '未知错误'));
                    });
            }
        }

        // 标签切换函数
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tab");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";

            // 加载相应的数据
            if (tabName === 'users') {
                loadUsers();
            } else if (tabName === 'content') {
                loadContent();
            } else if (tabName === 'orders') {
                loadOrders();
            } else if (tabName === 'statistics') {
                loadStats();
            }
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 默认显示用户管理标签并加载第一页
            document.querySelector('.tab').click();
            loadUsers(1);
        });
        
        function searchUsers() {
            const searchTerm = document.getElementById('userSearchInput').value.trim();
            loadUsers(1, searchTerm);
        }

        // 加载统计数据
        function loadStats(date = new Date().toISOString().split('T')[0], sortBy = 'view_home') {
            fetch(`/admin/statistics?date=${date}&sortBy=${sortBy}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data) {
                        throw new Error('No data received');
                    }
                    
                    // 更新趋势图
                    if (data.trendStats && Array.isArray(data.trendStats)) {
                        updateTrendChart(data.trendStats);
                    }
                    
                    // 更新指标卡片
                    if (data.dailyStats) {
                        updateMetricsCards(data.dailyStats);
                    }
                    
                    // 更新用户行为表格
                    if (data.userStats) {
                        updateStatsTable(data.userStats, sortBy);
                    }
                })
                .catch(error => {
                    console.error('Error loading statistics:', error);
                });
        }

        // 更新趋势图
        function updateTrendChart(trendStats) {
            const ctx = document.getElementById('trendChart');
            if (!ctx) {
                console.error('Cannot find trend chart canvas element');
                return;
            }

            // 如果已存在图表实例，销毁它
            if (window.trendChart instanceof Chart) {
                window.trendChart.destroy();
            }

            // 创建新的图表实例
            window.trendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: trendStats.map(s => new Date(s.date).toLocaleDateString()),
                    datasets: [{
                        label: '总访问量',
                        data: trendStats.map(s => s.count),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // 更新指标卡片
        function updateMetricsCards(dailyStats) {
            const metrics = {
                view_home: '首页访问',
                view_detail: '详情查看',
                sort_content: '内容排序',
                purchase: '购买行为'
            };
            
            const container = document.getElementById('metricsCards');
            container.innerHTML = Object.entries(metrics).map(([key, label]) => {
                const count = dailyStats.find(s => s.action === key)?.count || 0;
                return `
                    <div class="col-md-3">
                        <div class="card metrics-card">
                            <div class="card-body">
                                <h5 class="card-title">${label}</h5>
                                <h2 class="card-text">${count}</h2>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // 更新统计表格
        function updateStatsTable(userStats, sortBy) {
            const tbody = document.querySelector('#statsTable tbody');
            if (!tbody || !userStats) {
                console.error('Table body or user stats not found');
                return;
            }
            tbody.innerHTML = '';
            
            userStats.forEach(user => {
                tbody.innerHTML += `
                    <tr>
                        <td>${user.username}</td>
                        <td>${user.view_home || 0}</td>
                        <td>${user.view_detail || 0}</td>
                        <td>${user.sort_content || 0}</td>
                        <td>${user.purchase || 0}</td>
                    </tr>
                `;
            });
        }

        // 更新统计数据
        function updateStats(date) {
            loadStats(date);
        }

        // 排序统计表格
        function sortStats(metric) {
            const date = document.getElementById('dateSelector').value;
            loadStats(date, metric);
        }

        // 内容管理相关的函数
        function editContent(id) {
            window.location.href = `/admin/content/add?id=${id}`;
        }

        function deleteContent(id) {
            if (confirm('确定要删除这个内容吗？')) {
                fetch(`/admin/content/${id}`, { method: 'DELETE' })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert('内容删除成功');
                        loadContent();
                    })
                    .catch(error => {
                        console.error('删除失败:', error);
                        alert('删除内容失败: ' + (error.error || '未知错误'));
                    });
            }
        }

        function loadContent() {
            fetch('/admin/content')
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector('#contentTable tbody');
                    if (!tbody) {
                        console.error('Content table body not found');
                        return;
                    }

                    tbody.innerHTML = '';
                    const content = data.content || [];
                    if (content.length > 0) {
                        content.forEach(item => {
                            tbody.innerHTML += `
                                <tr>
                                    <td>${item.id}</td>
                                    <td>${item.simpleInfo || ''}</td>
                                    <td>${item.location || ''}</td>
                                    <td>${item.area || ''}</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" onclick="editContent(${item.id})">
                                            <i class="fas fa-edit"></i> 编辑
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteContent(${item.id})">
                                            <i class="fas fa-trash"></i> 删除
                                        </button>
                                    </td>
                                </tr>
                            `;
                        });
                    } else {
                        tbody.innerHTML = '<tr><td colspan="5" class="text-center">暂无内容数据</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('加载内容数据失败:', error);
                    const tbody = document.querySelector('#contentTable tbody');
                    if (tbody) {
                        tbody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">加载失败: ${error.message}</td></tr>`;
                    }
                });
        }

        // 确保在页面加载完成后调用 loadContent
        document.addEventListener('DOMContentLoaded', () => {
            loadContent();
        });
    </script>
</body>
</html>
