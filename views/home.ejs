<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .main-content {
            width: 100%;
        }
        .header {
            margin-bottom: 20px;
        }
        .header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .logo {
            display: flex;
            align-items: center;
        }
        .logo-image {
            max-height: 30px;
            width: auto;
        }
        .title {
            font-size: 24px;
            margin: 0;
        }
        .user-info {
            font-size: 14px;
            white-space: nowrap;
        }
        .search-filter-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        .search-bar {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        #search-input {
            width: 100%;
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 14px;
        }
        .filter-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: nowrap;
        }
        #sort-button, #area-filter-button, #city-filter-button {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            background-color: white;
            cursor: pointer;
            font-size: 14px;
            white-space: nowrap;
            min-width: 100px;
            text-align: center;
        }
        .card-list {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            justify-content: center;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
            cursor: pointer;
            transition: 0.3s;
            position: relative;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .card-cover-container {
            width: 100%;
            padding-top: 75%;
            position: relative;
            overflow: hidden;
        }
        .card-cover {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .card-content {
            padding: 15px;
        }
        .card-number {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .card-description {
            font-size: 14px;
            margin-bottom: 5px;
        }
        .card-price {
            color: #e74c3c;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .card-area {
            font-size: 12px;
            color: #7f8c8d;
        }
        .detail-page {
            position: fixed;
            top: 0;
            right: -33.33%;
            width: 33.33%;
            height: 100%;
            background-color: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            overflow-y: auto;
            transition: 0.3s;
            padding: 20px;
            box-sizing: border-box;
            z-index: 1000;
        }
        .detail-page.open {
            right: 0;
        }
        .detail-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: none;
            z-index: 999;
        }
        .overlay.open {
            display: block;
        }
        
        @media (min-width: 769px) {
            .search-filter-container {
                flex-wrap: nowrap;
            }

            .filter-buttons {
                flex: 0 0 auto;
            }
        }

        @media (max-width: 768px) {
            .card-list {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }
            .title {
                margin-bottom: 15px;
                text-align: center;
                font-size: 20px;
            }
            .search-bar {
                flex-basis: 100%;
                max-width: none;
            }
            .filter-buttons {
                flex-basis: 100%;
                justify-content: space-between;
            }
            #sort-button, #area-filter-button, #city-filter-button {
                flex: 1 1 0;
                min-width: 0;
            }
            .user-info {
                margin-left: 0;
                text-align: center;
            }
            .detail-page {
                width: 100%;
                right: -100%;
            }
        }

        /* 添加新的样式 */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 5px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .user-link {
            color: #3498db;
            text-decoration: none;
            cursor: pointer;
        }

        .user-link:hover {
            text-decoration: underline;
        }

        .purchase-btn {
            display: block;
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .purchase-btn:hover {
            background-color: #45a049;
        }

        .comment-list {
            margin-top: 20px;
            border-top: 1px solid #ddd;
            padding-top: 20px;
        }

        .comment {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .purchased-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #4CAF50;
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
            z-index: 1;
        }

        .customer-service-info {
            margin-top: 15px;
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
            font-size: 14px;
            color: #333;
        }

        #area-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .area-item {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: center;
            cursor: pointer;
        }

        .area-item.selected {
            background-color: #4CAF50;
            color: white;
        }

        #city-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .city-item {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: center;
            cursor: pointer;
        }

        .city-item.selected {
            background-color: #4CAF50;
            color: white;
        }

        @media (max-width: 768px) {
            #area-filter-button, #city-filter-button,#sort-button {
                width: 100%;
                margin-top: 10px;
            }
        }

        .user-info-container {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .balance-warning {
            color: #e74c3c;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            text-decoration: underline;
        }

        .balance-warning:hover {
            color: #c0392b;
        }

        @media (max-width: 768px) {
            .user-info-container {
                flex-direction: column;
                align-items: flex-end;
            }

            .balance-warning {
                text-align: right;
                margin-bottom: 5px;
            }
        }

        .edit-badge {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: #3498db;
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
            z-index: 1;
            text-decoration: none;
            cursor: pointer;
        }

        .edit-badge:hover {
            background-color: #2980b9;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="main-content">
            <div class="header">
                <div class="header-top">
                    <!-- 将h1标题替换为logo图片 -->
                    <div class="logo">
                        <img src="/images/logo.png" alt="网站Logo" class="logo-image">
                    </div>
                    <div class="user-info-container">
                        <% if (typeof user !== 'undefined' && user && user.points < 80) { %>
                            <div class="balance-warning" onclick="showUserPoints()">余额不足，请及时充值</div>
                        <% } %>
                        <div class="user-info">
                            <% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
                                欢迎, <%= user.username %> | <a href="/logout">登出</a> | <a href="/admin">管理页面</a>
                            <% } else if (typeof user !== 'undefined' && user) { %>
                                欢迎, <a href="#" class="user-link" onclick="showUserPoints()"><%= user.username %></a> | <a href="/logout">登出</a>
                            <% } else { %>
                                <a href="/login">登录</a> | <a href="/register">注册</a>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="search-filter-container">
                    <div class="search-bar">
                        <input type="text" id="search-input" placeholder="搜索...">
                    </div>
                    <div class="filter-buttons">
                        <button id="sort-button">编号：正序</button>
                        <button id="city-filter-button">选择城市</button>
                        <button id="area-filter-button">选择地区</button>
                    </div>
                </div>
            </div>
            <div class="card-list" id="card-container"></div>
        </div>
    </div>
    
    <div class="overlay" id="overlay"></div>
    <div class="detail-page" id="detail-page">
        <span class="detail-close" onclick="closeDetail()">&times;</span>
        <div id="detail-content"></div>
    </div>

    <!-- 用户积分模态框 -->
    <div id="userPointsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeUserPointsModal()">&times;</span>
            <h4>尊贵的用户，你好</h4>
            <p>您当前的积分: <span id="userPointsDisplay"></span></p>
            <div class="customer-service-info">
                充值积分请联系客服：<%- customerServiceContact.replace(/\n/g, '<br>') %>
            </div>
        </div>
    </div>

    <!-- 添模态框 -->
    <div id="area-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>选择地区</h2>
            <div id="area-list"></div>
        </div>
    </div>

    <!-- 添加城市模态框 -->
    <div id="city-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>选择城市</h2>
            <div id="city-list"></div>
        </div>
    </div>

    <script>
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?c9c1e5a5092ab97775b11039fc9ca6fa";
            var s = document.getElementsByTagName("script")[0]; 
            s.parentNode.insertBefore(hm, s);
        })();

        let cardData = <%- JSON.stringify(content.data) %>;
        let sortAscending = true;
        let isDetailOpen = false;
        let selectedArea = '';
        let selectedCity = '';

        function populateFilters() {
            populateAreaFilter();
            populateCityFilter();
        }

        function populateAreaFilter() {
            const areaList = document.getElementById('area-list');
            const areas = [...new Set(cardData.map(card => card.area))];
            areas.forEach(area => {
                const areaItem = document.createElement('div');
                areaItem.className = 'area-item';
                areaItem.textContent = area;
                areaItem.onclick = () => selectArea(area);
                areaList.appendChild(areaItem);
            });
        }

        function populateCityFilter() {
            const cityList = document.getElementById('city-list');
            const cities = [...new Set(cardData.map(card => card.city))];
            cities.forEach(city => {
                const cityItem = document.createElement('div');
                cityItem.className = 'city-item';
                cityItem.textContent = city;
                cityItem.onclick = () => selectCity(city);
                cityList.appendChild(cityItem);
            });
        }

        function selectArea(area) {
            selectedArea = area === selectedArea ? '' : area;
            document.querySelectorAll('.area-item').forEach(item => {
                item.classList.toggle('selected', item.textContent === selectedArea);
            });
            filterAndSortCards();
            closeModal();
        }

        function selectCity(city) {
            selectedCity = city === selectedCity ? '' : city;
            document.querySelectorAll('.city-item').forEach(item => {
                item.classList.toggle('selected', item.textContent === selectedCity);
            });
            filterAndSortCards();
            closeCityModal();
        }

        function renderCards(cards) {
            const container = document.getElementById('card-container');
            container.innerHTML = '';
            cards.forEach(card => {
                const cardElement = document.createElement('div');
                cardElement.className = 'card';
                cardElement.innerHTML = `
                    ${card.hasPurchased ? '<div class="purchased-badge">已购买</div>' : ''}
                    <div class="card-cover-container">
                        <img src="${card.preview}" alt="卡片${card.id}封面" class="card-cover">
                        <% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
                            <a href="/admin/content/edit/${card.id}" class="edit-badge" onclick="event.stopPropagation()">编辑</a>
                        <% } %>
                    </div>
                    <div class="card-content">
                        <div class="card-number">编号：${card.id}</div>
                        <div class="card-description">${card.simpleInfo}</div>
                        <div class="card-price">￥${card.price.toFixed(2)}</div>
                        <div class="card-area">地区：${card.city} - ${card.location}</div>
                    </div>
                `;
                cardElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    openDetail(card);
                });
                container.appendChild(cardElement);
            });
        }

        function filterAndSortCards() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            let filteredCards = cardData.filter(card => 
                (card.simpleInfo.toLowerCase().includes(searchTerm) || card.id.toString().includes(searchTerm)) &&
                (selectedArea === '' || card.area === selectedArea) &&
                (selectedCity === '' || card.city === selectedCity)
            );
            
            filteredCards.sort((a, b) => {
                if (sortAscending) {
                    return a.id - b.id;
                } else {
                    return b.id - a.id;
                }
            });

            renderCards(filteredCards);
        }

        async function logAction(action, contentId = null) {
            try {
                const response = await fetch('/api/user-actions/log', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        action,
                        contentId
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to log action');
                }
                
                const data = await response.json();
            } catch (error) {
                console.error('Error logging action:', error);
            }
        }

        function openDetail(card) {

            const detailPage = document.getElementById('detail-page');
            const overlay = document.getElementById('overlay'); 
            const detailContent = document.getElementById('detail-content');
            
            let detailHtml = `
                <h2>编号：${card.id}</h2>
                <img src="${card.preview}" alt="预览图" style="width: 100%; height: auto; object-fit: cover; margin-bottom: 15px;">
                <p><strong>简介：</strong> ${card.simpleInfo}</p>
                <p><strong>价格：</strong> ￥${card.price.toFixed(2)}</p>
                <p><strong>地区：</strong> ${card.city} - ${card.location}</p>
                <p><strong>详情：</strong></p>
                <div>${card.detail}</div>

                <div class="comment-list">
                    <h3>评论</h3>
                    ${Array.isArray(card.commnet) ? card.commnet.map(comment => `<div class="comment">${comment}</div>`).join('') : '暂无评论'}
                </div>
            `;

            if (card.hasPurchased) {
                detailHtml += `
                    <h3>隐藏内容</h3>
                    <div>${card.hiddenContent}</div>
                `;
            } else if (<%= user ? 'true' : 'false' %>) {
                detailHtml += `
                    <button onclick="confirmPurchase(${card.id})" class="purchase-btn">购买联系方式 (需要 <%= contentPrice %> 分)</button>
                `;
            } else {
                detailHtml += `<p>请<a href="/login">登录</a>后购买联系方式</p>`;
            }

            // 使用 DOMPurify 清理 HTML（如果已引入）
            if (typeof DOMPurify !== 'undefined') {
                detailHtml = DOMPurify.sanitize(detailHtml);
            }

            detailContent.innerHTML = detailHtml;
            detailPage.classList.add('open');
            overlay.classList.add('open');
            
            if (!isDetailOpen) {
                history.pushState({ isDetail: true }, '');
                isDetailOpen = true;
            }

            // 手动发送 PV 统计
            if (window._hmt) {
                _hmt.push(['_trackPageview', '/detail/' + card.id]);
            }

            logAction('view_detail', card.id);
        }

        function confirmPurchase(contentId) {
            if (confirm('确定要购买这个隐藏内容吗？')) {
                purchaseContent(contentId);
            }
        }

        async function purchaseContent(contentId) {
            try {
                fetch(`/content/${contentId}/purchase`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('detail-content').innerHTML = `
                            <h3>隐藏内容</h3>
                            ${data.hiddenContent}
                        `;
                        // 更新用户积分显示
                        if (document.getElementById('userPointsDisplay')) {
                            document.getElementById('userPointsDisplay').textContent = data.remainingPoints;
                        }
                        
                        var username = '<%= user ? user.username : "未登录用户" %>';
                        // 百度统计打点
                        if (window._hmt) {
                            _hmt.push(['_trackEvent', '购买', '使用积分购买', `用户ID:${username},内容ID:${contentId}`]);
                        }
                    } else {
                        if (data.error === '积分不足') {
                            alert('积分不足，请联系客服充值');
                        } else {
                            alert(data.error);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('购买失败，请稍后再试');
                });

                await logAction('purchase', contentId);
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function closeDetail() {
            const detailPage = document.getElementById('detail-page');
            const overlay = document.getElementById('overlay');
            detailPage.classList.remove('open');
            overlay.classList.remove('open');

            if (isDetailOpen) {
                history.back();
                isDetailOpen = false;
            }
        }

        function toggleSort() {
            sortAscending = !sortAscending;
            document.getElementById('sort-button').textContent = sortAscending ? '编号：正序' : '编号：倒序';
            filterAndSortCards();
            logAction('sort_content', null);
        }

        // 添加新的函数来显示和关闭用户积分模态框
        function showUserPoints() {
            fetch('/api/user/points')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('userPointsDisplay').textContent = data.points;
                    document.getElementById('userPointsModal').style.display = 'block';
                })
                .catch(error => console.error('Error fetching user points:', error));
        }

        function closeUserPointsModal() {
            document.getElementById('userPointsModal').style.display = 'none';
        }

        // 模态框相关函数
        const modal = document.getElementById('area-modal');
        const btn = document.getElementById('area-filter-button');
        const span = document.getElementsByClassName('close')[0];

        btn.onclick = () => modal.style.display = 'block';
        span.onclick = closeModal;
        window.onclick = (event) => {
            if (event.target == modal) {
                closeModal();
            }
        }

        function closeModal() {
            modal.style.display = 'none';
        }

        // 城市模态框相关函数
        const cityModal = document.getElementById('city-modal');
        const cityBtn = document.getElementById('city-filter-button');
        const citySpan = cityModal.getElementsByClassName('close')[0];

        cityBtn.onclick = () => cityModal.style.display = 'block';
        citySpan.onclick = closeCityModal;
        window.onclick = (event) => {
            if (event.target == cityModal) {
                closeCityModal();
            } else if (event.target == modal) {
                closeModal();
            } else if (event.target == document.getElementById('userPointsModal')) {
                closeUserPointsModal();
            }
        }

        function closeCityModal() {
            cityModal.style.display = 'none';
        }

        document.addEventListener('DOMContentLoaded', function() {
            populateFilters();
            filterAndSortCards();

            document.getElementById('search-input').addEventListener('input', filterAndSortCards);
            document.getElementById('sort-button').addEventListener('click', toggleSort);

            document.addEventListener('click', function(event) {
                const detailPage = document.getElementById('detail-page');
                if (detailPage.classList.contains('open') && !detailPage.contains(event.target)) {
                    closeDetail();
                }
            });

            document.getElementById('detail-page').addEventListener('click', function(event) {
                event.stopPropagation();
            });

            document.getElementById('overlay').addEventListener('click', closeDetail);

            window.addEventListener('popstate', function(event) {
                if (event.state && event.state.isDetail) {
                    // 如果是详情页态，不做任何操作
                } else {
                    // 如果不是详情页状态，关闭详情页
                    const detailPage = document.getElementById('detail-page');
                    const overlay = document.getElementById('overlay');
                    if (detailPage.classList.contains('open')) {
                        detailPage.classList.remove('open');
                        overlay.classList.remove('open');
                        isDetailOpen = false;
                    }
                }
            });

            // 检查 URL 中是否有 id 参数
            const idParam = new URLSearchParams(window.location.search).get('id');
            if (idParam) {
                const card = cardData.find(card => card.id.toString() === idParam);
                if (card) {
                    openDetail(card);
                } else {
                    console.log('未找到应 ID 的卡片');
                }
            }

            // 新增：上报用户名到百度统计
            var username = '<%= user ? user.username : "未登录用户" %>';
            if (window._hmt) {
                _hmt.push(['_trackEvent', '用户', '访问主页', username]);
                window._hmt.push(['_setUserId', username]);
            }

            logAction('view_home');
        });
    </script>

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-NQ05S3PNMS"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'G-NQ05S3PNMS');

        // 添加发送事件的函数
        function sendGAEvent(eventCategory, eventAction, eventLabel) {
            gtag('event', eventAction, {
                'event_category': eventCategory,
                'event_label': eventLabel
            });
        }
    </script>

    <% if (locals.justLoggedIn) { %>
    <script>
        sendGAEvent('User', 'Login', '<%= user.username %>');
    </script>
    <% } %>

</body>
</html>
