info-index/
  /Users/momo/Desktop/info-index/app.js的内容是:
    require('dotenv').config();
const express = require('express');
const path = require('path');
const cors = require('cors');
const { sequelize } = require('./config/database');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const passport = require('passport');

const app = express();

// 设置静态文件服务
app.use(express.static(path.join(__dirname, 'public')));

app.use(cors());
app.use(express.json());  // 添加这行来支持 JSON 请求体
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: { secure: process.env.NODE_ENV === 'production' }
}));

app.use(passport.initialize());
app.use(passport.session());

// 添加一个中间件来确保 req.user 总是可用
app.use((req, res, next) => {
  res.locals.user = req.user || null;
  next();
});

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// 导入路由
const homeRoutes = require('./routes/homeRoutes');
const userRoutes = require('./routes/userRoutes');
const adminRoutes = require('./routes/admin');

// 使用路由
app.use('/', homeRoutes);
app.use('/api/users', userRoutes);
app.use('/', userRoutes);  // 注意这里的变化
app.use('/admin', adminRoutes);

const PORT = process.env.PORT || 3000;

sequelize.sync().then(() => {
  app.listen(PORT, () => {
    console.log(`服务器运行在端口 ${PORT}`);
  });
});

// 错误处理中间件
app.use((err, req, res, next) => {
  // 设置局部变量，只在开发中提供错误
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // 设置状态码
  res.status(err.status || 500);

  // 渲染错误页面
  res.render('error', {
    message: err.message,
    error: err,
    status: err.status || 500  // 确保传递 status
  });
});



  config/
    /Users/momo/Desktop/info-index/config/database.js的内容是:
      const { Sequelize } = require('sequelize');
const path = require('path');

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: path.join(__dirname, '..', 'database.sqlite')
});

module.exports = { sequelize };  // 注意这里的变化


  controllers/
    /Users/momo/Desktop/info-index/controllers/homeController.js的内容是:
      const Content = require('../models/Content');

exports.getHomePage = async (req, res, next) => {
  try {
    const content = await Content.findAll({
      order: [['id', 'ASC']],
      limit: 50,
      raw: true // 使用原始查询结果
    });

    const formattedContent = {
      code: 200,
      data: content.map(item => {
        let commnet = [];
        if (typeof item.commnet === 'string') {
          try {
            // 尝试清理 JSON 字符串
            const cleanedCommnet = item.commnet.trim().replace(/^\uFEFF/, '');
            commnet = JSON.parse(cleanedCommnet);
          } catch (e) {
            console.warn(`无法解析 ID ${item.id} 的 commnet 字段:`, e);
          }
        }

        return {
          id: item.id,
          simpleInfo: item.simpleInfo,
          preview: item.preview,
          location: item.location,
          price: item.price,
          area: item.area,
          detail: item.detail, // 直接使用，不进行解析
          commnet: Array.isArray(commnet) ? commnet : []
        };
      })
    };

    res.render('home', { 
      title: '老师信息大全', 
      content: formattedContent,
      user: req.user
    });
  } catch (error) {
    console.error('获取内容时出错:', error);
    next(error);
  }
};



    /Users/momo/Desktop/info-index/controllers/userController.js的内容是:
      const User = require('../models/User');
const jwt = require('jsonwebtoken');

exports.register = async (req, res) => {
  try {
    const { username, password } = req.body;
    
    // 检查用户名是否已存在
    const existingUser = await User.findOne({ where: { username } });
    if (existingUser) {
      return res.status(400).render('register', { error: '用户名已存在' });
    }

    // 创建新用户
    await User.create({
      username,
      password,
      role: 'user'  // 默认角色为普通用户
    });

    // 重定向到登录页面,并显示成功消息
    res.redirect('/login?registered=true');
  } catch (error) {
    console.error('注册错误:', error);
    res.status(500).render('register', { error: '注册失败,请稍后再试' });
  }
};

exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ where: { username } });
    if (!user) {
      return res.status(404).render('login', { error: '用户不存在' });
    }
    const isValid = await user.validPassword(password);
    if (!isValid) {
      return res.status(401).render('login', { error: '密码错误' });
    }
    const token = jwt.sign(
      { id: user.id, username: user.username, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );
    
    // 将 token 存储在 cookie 中
    res.cookie('token', token, { httpOnly: true, maxAge: 3600000 }); // 1小时有效期
    
    // 重定向到主页
    res.redirect('/');
  } catch (error) {
    console.error('登录错误:', error);
    res.status(500).render('login', { error: '登录失败,请稍后再试' });
  }
};

exports.getLoginPage = (req, res) => {
    const registered = req.query.registered === 'true';
    res.render('login', { 
        title: '登录',
        registered: registered
    });
};

exports.getRegisterPage = (req, res) => {
    res.render('register', { title: '注册' });
};

// ... 其他导入和方法 ...

exports.logout = (req, res) => {
    res.clearCookie('token');
    res.redirect('/login');
};

exports.getUserPoints = async (req, res) => {
    try {
        // 从 cookie 中获取 token
        const token = req.cookies.token;
        if (!token) {
            return res.status(401).json({ error: '未登录' });
        }

        // 验证 token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.id;

        // 查找用户
        const user = await User.findByPk(userId);
        if (!user) {
            return res.status(404).json({ error: '用户不存在' });
        }

        // 返回用户积分
        res.json({ points: user.points });
    } catch (error) {
        console.error('获取用户积分错误:', error);
        res.status(500).json({ error: '获取积分失败，请稍后再试' });
    }
};



  /Users/momo/Desktop/info-index/database.sqlite的内容是:
    (跳过二进制文件)

  /Users/momo/Desktop/info-index/db.js的内容是:
    const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.resolve(__dirname, 'database.sqlite');

const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('Could not connect to database', err);
  } else {
    console.log('Connected to database');
  }
});

function query(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

module.exports = {
  query
};



  /Users/momo/Desktop/info-index/index.html的内容是:
    <!DOCTYPE html>
<html lang="zh">

<script>
var _hmt = _hmt || [];
(function() {
    var hm = document.createElement("script");
    hm.src = "https://hm.baidu.com/hm.js?2472ef3603b334b2cdc8d2109cd5c9ab";
    var s = document.getElementsByTagName("script")[0]; 
    s.parentNode.insertBefore(hm, s);
})();
</script>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>老师信息大全</title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
            display: flex;
            justify-content: center;
        }
        .container {
            max-width: 1200px;
            width: 100%;
            display: flex;
            transition: 0.3s;
        }
        .main-content {
            flex: 1;
            transition: 0.3s;
            padding: 20px;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid #e0e0e0;
        }
        .title {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
            margin: 0;
        }
        .search-bar {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        #search-input {
            width: 200px;
            padding: 8px 15px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            transition: 0.3s;
        }
        #search-input:focus {
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }
        #sort-button, #area-filter {
            padding: 8px 15px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 20px;
            background-color: white;
            cursor: pointer;
            transition: 0.3s;
        }
        #sort-button:hover, #area-filter:hover {
            background-color: #f0f0f0;
        }
        #sort-icon {
            margin-right: 5px;
        }
        .card-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
            cursor: pointer;
            transition: 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .card-cover {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        .card-content {
            padding: 15px;
        }
        .card-number {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .card-description {
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
        }
        .card-price {
            font-weight: bold;
            color: #e44d26;
        }
        .card-area {
            font-size: 14px;
            color: #444;
            margin-top: 5px;
        }
        .card-cover-container {
            width: 100%;
            padding-top: 75%; /* 4:3 宽高比 */
            position: relative;
            overflow: hidden;
            background-color: #f0f0f0;
        }
        .card-cover {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        .detail-page {
            position: fixed;
            top: 0;
            right: -30%;
            width: 30%;
            height: 100%;
            background-color: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            overflow-y: auto;
            transition: 0.3s;
            padding: 20px;
            box-sizing: border-box;
            z-index: 1000;
        }
        .detail-page.open {
            right: 0;
        }
        .detail-page img {
            max-width: 100%;
            height: auto;
            margin-bottom: 15px;
        }
        .detail-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        .comment-list {
            margin-top: 20px;
            border-top: 1px solid #e0e0e0;
            padding-top: 20px;
        }
        .comment {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #f0f0f0;
        }
        .comment:last-child {
            border-bottom: none;
        }
        @media (min-width: 1200px) {
            .card-list {
                grid-template-columns: repeat(4, 1fr);
            }
        }
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: flex-start;
            }
            .title {
                margin-bottom: 10px;
            }
            .search-bar {
                flex-wrap: wrap;
                justify-content: space-between;
            }
            #search-input {
                width: 100%;
                margin-bottom: 10px;
            }
            #sort-button, #area-filter {
                flex: 1;
            }
            .card-list {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }
            .card-cover {
                height: 100px;
            }
            .card-content {
                padding: 10px;
            }
            .card-description, .card-price, .card-area {
                font-size: 12px;
            }
            .detail-page {
                width: 100%;
                right: -100%;
            }
            .detail-page.open {
                right: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-content">
            <div class="header">
                <h1 class="title">北京女王信息大全</h1>
                <div class="search-bar">
                    <input type="text" id="search-input" placeholder="搜索...">
                    <button id="sort-button">
                        <span id="sort-icon">↑↓</span>
                        编号
                    </button>
                    <select id="area-filter">
                        <option value="">所有地区</option>
                    </select>
                </div>
            </div>
            <div class="card-list" id="card-container"></div>
        </div>
        <div class="detail-page" id="detail-page">
            <span class="detail-close" onclick="closeDetail()">&times;</span>
            <div id="detail-content"></div>
        </div>
    </div>

    <script>
        let cardData = [];
        let sortAscending = true;

        // 从JSON文件加载数据
        fetch('test.json')
            .then(response => response.json())
            .then(data => {
                cardData = data.data;
                populateAreaFilter();
                filterAndSortCards();

                const idParam = getUrlParameter('id');
                if (idParam) {
                    const card = cardData.find(card => card.id.toString() === idParam);
                    if (card) {
                        openDetail(card);
                    } else {
                        console.log('未找到对应 ID 的卡片');
                    }
                }
            })
            .catch(error => console.error('Error loading the JSON file:', error));

        
        // 解析 URL 参数的函数
        function getUrlParameter(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // 页面加载完成后执行
        document.addEventListener('DOMContentLoaded', function() {
            // 检查 URL 中是否有 id 参数
            const idParam = getUrlParameter('id');
            if (idParam) {
                // 如果有 id 参数，查找对应的卡片并打开详情
                const card = cardData.find(card => card.id.toString() === idParam);
                if (card) {
                    openDetail(card);
                } else {
                    console.log('未找到对应 ID 的卡片');
                }
            }
        });

        function populateAreaFilter() {
            const areaFilter = document.getElementById('area-filter');
            const areas = [...new Set(cardData.map(card => card.area))];
            areas.forEach(area => {
                const option = document.createElement('option');
                option.value = area;
                option.textContent = area;
                areaFilter.appendChild(option);
            });
        }

        function renderCards(cards) {
            const container = document.getElementById('card-container');
            container.innerHTML = '';
            cards.forEach(card => {
                const cardElement = document.createElement('div');
                cardElement.className = 'card';
                cardElement.innerHTML = `
                    <div class="card-cover-container">
                        <img src="${card.preview}" alt="卡片${card.id}封面" class="card-cover">
                    </div>
                    <div class="card-content">
                        <div class="card-number">编号：${card.id}</div>
                        <div class="card-description">${card.simpleInfo}</div>
                        <div class="card-price">￥${card.price.toFixed(2)}</div>
                        <div class="card-area">地区：${card.location}</div>
                    </div>
                `;
                cardElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    openDetail(card);
                });
                container.appendChild(cardElement);
            });
        }

        function filterAndSortCards() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const selectedArea = document.getElementById('area-filter').value;
            let filteredCards = cardData.filter(card => 
                (card.simpleInfo.toLowerCase().includes(searchTerm) || card.id.toString().includes(searchTerm)) &&
                (selectedArea === '' || card.area === selectedArea)
            );
            
            filteredCards.sort((a, b) => {
                if (sortAscending) {
                    return a.id - b.id;
                } else {
                    return b.id - a.id;
                }
            });

            renderCards(filteredCards);
        }

        let isDetailOpen = false;

        function openDetail(card) {
            const detailPage = document.getElementById('detail-page');
            const detailContent = document.getElementById('detail-content');
            let detailHtml = `
                <h2>编号：${card.id}</h2>
                <img src="${card.preview}" alt="预览图" style="width: 100%; height: 100%; object-fit: cover; margin-bottom: 15px;">
                <p><strong>简介：</strong> ${card.simpleInfo}</p>
                <p><strong>价格：</strong> ￥${card.price.toFixed(2)}</p>
                <p><strong>地区：</strong> ${card.location}</p>
                <p><strong>详情：</strong></p>
            `;

            // 处理详情内容
            card.detail.forEach(item => {
                if (item.type === 1) {
                    detailHtml += `<p>${item.content}</p>`;
                } else if (item.type === 2) {
                    detailHtml += `<img src="${item.content}" alt="详情图片" style="max-width: 100%; height: auto; margin-bottom: 15px;">`;
                }
            });

            // 添加评论
            detailHtml += `
                <div class="comment-list">
                    <h3>评论</h3>
                    ${card.commnet.map(comment => `<div class="comment">${comment}</div>`).join('')}
                </div>
            `;

            detailContent.innerHTML = detailHtml;
            detailPage.classList.add('open');
            if (window.innerWidth > 768) {
                document.querySelector('.main-content').style.width = '70%';
            }
            // 添加历史记录状态
            if (!isDetailOpen) {
                history.pushState({ isDetail: true }, '');
                isDetailOpen = true;
            }

             // 手动发送 PV 统计
            if (window._hmt) {
                _hmt.push(['_trackPageview', '/detail/' + card.id]);
            }
        }

        function closeDetail() {
            const detailPage = document.getElementById('detail-page');
            detailPage.classList.remove('open');
            document.querySelector('.main-content').style.width = '100%';

            // 移除历史记录状态
            if (isDetailOpen) {
                history.back();
                isDetailOpen = false;
            }
        }

        function toggleSort() {
            sortAscending = !sortAscending;
            document.getElementById('sort-icon').textContent = sortAscending ? '↑↓' : '↓↑';
            filterAndSortCards();
        }

        document.getElementById('search-input').addEventListener('input', filterAndSortCards);
        document.getElementById('area-filter').addEventListener('change', filterAndSortCards);
        document.getElementById('sort-button').addEventListener('click', toggleSort);

        // 点击外部关闭详情页
        document.addEventListener('click', function(event) {
            const detailPage = document.getElementById('detail-page');
            if (detailPage.classList.contains('open') && !detailPage.contains(event.target)) {
                closeDetail();
            }
        });

        // 阻止详情页内部点击事件冒泡
        document.getElementById('detail-page').addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // 监听 popstate 事件
        window.addEventListener('popstate', function(event) {
            if (event.state && event.state.isDetail) {
                // 如果是详情页状态，不做任何操作
            } else {
                // 如果不是详情页状态，关闭详情页
                const detailPage = document.getElementById('detail-page');
                if (detailPage.classList.contains('open')) {
                    detailPage.classList.remove('open');
                    document.querySelector('.main-content').style.width = '100%';
                    isDetailOpen = false;
                }
            }
        });
    </script>
</body>
</html>


  js/
  middlewares/
    /Users/momo/Desktop/info-index/middlewares/auth.js的内容是:
      const jwt = require('jsonwebtoken');

exports.isLoggedIn = (req, res, next) => {
  const token = req.cookies.token;
  if (token) {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.user = decoded;
      next();
    } catch (error) {
      res.clearCookie('token');
      res.redirect('/login');
    }
  } else {
    res.redirect('/login');
  }
};



    /Users/momo/Desktop/info-index/middlewares/isAdmin.js的内容是:
      const jwt = require('jsonwebtoken');

function isAdmin(req, res, next) {
    console.log('isAdmin middleware called');
    const token = req.cookies.token;

    if (token) {
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            console.log('User:', decoded);
            console.log('User role:', decoded.role);

            if (decoded.role === 'admin') {
                console.log('User is admin, proceeding to next middleware');
                req.user = decoded;
                next();
            } else {
                console.log('User is not admin, redirecting to home page');
                res.redirect('/');
            }
        } catch (error) {
            console.log('Invalid token, redirecting to login page');
            res.clearCookie('token');
            res.redirect('/login');
        }
    } else {
        console.log('No token found, redirecting to login page');
        res.redirect('/login');
    }
}

module.exports = isAdmin;


  models/
    /Users/momo/Desktop/info-index/models/Content.js的内容是:
      const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const Content = sequelize.define('Content', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  simpleInfo: {
    type: DataTypes.STRING,
    allowNull: false
  },
  preview: {
    type: DataTypes.STRING,
    allowNull: true
  },
  location: {
    type: DataTypes.STRING,
    allowNull: false
  },
  price: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  area: {
    type: DataTypes.STRING,
    allowNull: false
  },
  detail: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  commnet: {
    type: DataTypes.JSON,
    allowNull: false
  }
});

module.exports = Content;



    /Users/momo/Desktop/info-index/models/User.js的内容是:
      const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const bcrypt = require('bcryptjs');

const User = sequelize.define('User', {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  },
  role: {
    type: DataTypes.ENUM('user', 'admin'),
    defaultValue: 'user'
  },
  points: {  // 新增积分字段
    type: DataTypes.INTEGER,
    defaultValue: 0
  }
}, {
  hooks: {
    beforeCreate: async (user) => {
      if (user.password) {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(user.password, salt);
      }
    },
    beforeUpdate: async (user) => {
      if (user.changed('password')) {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(user.password, salt);
      }
    }
  }
});

User.prototype.validPassword = async function(password) {
  return await bcrypt.compare(password, this.password);
};

module.exports = User;



    /Users/momo/Desktop/info-index/models/index.js的内容是:
      const User = require('./User');
const Content = require('./Content');

module.exports = {
  User,
  Content
};



  /Users/momo/Desktop/info-index/package.json的内容是:
    {
  "name": "info-index",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "seed": "node scripts/seedContent.js",
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "jsonwebtoken": "^9.0.2",
    "mariadb": "^3.3.1",
    "multer": "^1.4.5-lts.1",
    "passport": "^0.7.0",
    "sequelize": "^6.37.3",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}



  public/
    /Users/momo/Desktop/info-index/public/.DS_Store的内容是:
      (跳过二进制文件)

    css/
      /Users/momo/Desktop/info-index/public/css/style.css的内容是:
        body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
}

header {
    background-color: #333;
    color: #fff;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

header h1 {
    margin: 0;
}

nav a {
    color: #fff;
    text-decoration: none;
    margin-left: 1rem;
}

main {
    padding: 2rem;
}

article {
    background-color: #f4f4f4;
    margin-bottom: 1rem;
    padding: 1rem;
    border-radius: 5px;
}

footer {
    background-color: #333;
    color: #fff;
    text-align: center;
    padding: 1rem;
    position: fixed;
    bottom: 0;
    width: 100%;
}



    images/
      iceice/
        /Users/momo/Desktop/info-index/public/images/iceice/1.jpg的内容是:
          (跳过二进制文件)

        /Users/momo/Desktop/info-index/public/images/iceice/2.jpg的内容是:
          (跳过二进制文件)

      /Users/momo/Desktop/info-index/public/images/logo.png的内容是:
        (跳过二进制文件)

    js/
      /Users/momo/Desktop/info-index/public/js/main.js的内容是:
        console.log('主页加载完成');



    uploads/
      /Users/momo/Desktop/info-index/public/uploads/1725977337201.jpeg的内容是:
        (跳过二进制文件)

      /Users/momo/Desktop/info-index/public/uploads/1725978535505.jpeg的内容是:
        (跳过二进制文件)

      /Users/momo/Desktop/info-index/public/uploads/1726063879977.webp的内容是:
        (跳过二进制文件)

      /Users/momo/Desktop/info-index/public/uploads/1726278214711.jpeg的内容是:
        (跳过二进制文件)

      /Users/momo/Desktop/info-index/public/uploads/1726278333497.png的内容是:
        (跳过二进制文件)

  routes/
    /Users/momo/Desktop/info-index/routes/admin.js的内容是:
      const express = require('express');
const router = express.Router();
const User = require('../models/User');
const Content = require('../models/Content');
const isAdmin = require('../middlewares/isAdmin');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// 将 isAdmin 中间件应用到所有管理员路由
router.use(isAdmin);

// 管理员仪表板
router.get('/', (req, res) => {
    res.render('admin/dashboard');
});

// 获取所有用户
router.get('/users', async (req, res) => {
    try {
        console.log('User model:', User); // 添加这行
        if (!User || !User.findAll) {
            throw new Error('User model is not properly defined');
        }
        const users = await User.findAll({
            attributes: ['id', 'username', 'role', 'points']
        });
        console.log('Users fetched:', users);
        res.json(users);
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ error: '获取用户列表失败' });
    }
});

// 添加新用户
router.post('/users', async (req, res) => {
    const { username, password, role } = req.body;
    if (role !== 'user' && role !== 'admin') {
        return res.status(400).json({ error: '无效的角色' });
    }
    try {
        const newUser = await User.create({ username, password, role });
        res.status(201).json({ message: '用户创建成功', user: newUser });
    } catch (error) {
        console.error('Error creating user:', error);
        res.status(500).json({ error: '创建用户失败' });
    }
});

// 删除用户
router.delete('/users/:id', async (req, res) => {
    const { id } = req.params;
    try {
        await User.destroy({ where: { id } });
        res.json({ message: '用户删除成功' });
    } catch (error) {
        res.status(500).json({ error: '删除用户失败' });
    }
});

// 获取所有内容
router.get('/content', async (req, res) => {
    try {
        console.log('正在获取内容');
        const content = await Content.findAll();
        console.log('获取到的内容:', JSON.stringify(content, null, 2));
        res.json(content);
    } catch (error) {
        console.error('获取内容列表失败:', error);
        res.status(500).json({ error: '获取内容列表失败' });
    }
});

// 配置 multer 存储
const imageStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, '../public/uploads/'))
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname))
    }
});

const upload = multer({ storage: imageStorage });

// 添加新内容
router.post('/content', upload.single('preview'), async (req, res) => {
    try {
        const { simpleInfo, location, price, area, detail, commnet } = req.body;
        const preview = req.file ? `/uploads/${req.file.filename}` : null;

        const newContent = await Content.create({ 
            simpleInfo, 
            preview, 
            location, 
            price: parseFloat(price), 
            area, 
            detail: detail || '', // 直接存储为字符串
            commnet: JSON.stringify(commnet) // 评论仍然保持 JSON 字符串格式
        });

        res.status(201).json({ message: '内容创建成功', content: newContent });
    } catch (error) {
        console.error('Error creating content:', error);
        res.status(500).json({ error: '创建内容失败' });
    }
});

// 添加新内容路由
router.get('/content/add', (req, res) => {
    console.log('访问添加内容页面');
    res.render('admin/content-form', { title: '添加新内容', contentId: null });
});

// 编辑内容路由
router.get('/content/edit/:id', (req, res) => {
    res.render('admin/content-form', { contentId: req.params.id });
});

// 获取单个内容
router.get('/content/:id', async (req, res) => {
    try {
        const content = await Content.findByPk(req.params.id);
        if (content) {
            res.json(content);
        } else {
            res.status(404).json({ error: '内容不存在' });
        }
    } catch (error) {
        console.error('Error fetching content:', error);
        res.status(500).json({ error: '获取内容失败' });
    }
});

// 更新内容
router.put('/content/:id', upload.single('preview'), async (req, res) => {
    try {
        const content = await Content.findByPk(req.params.id);
        if (!content) {
            return res.status(404).json({ error: '内容不存在' });
        }

        const { simpleInfo, location, price, area, detail, commnet } = req.body;
        const updateData = { 
            simpleInfo, 
            location, 
            price: parseFloat(price), 
            area, 
            detail: detail || '', // 直接存储为字符串
            commnet: JSON.stringify(commnet) // 评论仍然保持 JSON 字符串格式
        };

        if (req.file) {
            updateData.preview = `/uploads/${req.file.filename}`;
            // 删除旧的预览图
            if (content.preview) {
                const oldPath = path.join(__dirname, '..', 'public', content.preview);
                fs.unlink(oldPath, err => {
                    if (err) console.error('Error deleting old preview:', err);
                });
            }
        }

        await content.update(updateData);
        res.json({ message: '内容更新成功', content });
    } catch (error) {
        console.error('Error updating content:', error);
        res.status(500).json({ error: '更新内容失败' });
    }
});

// 删除内容
router.delete('/content/:id', async (req, res) => {
    const { id } = req.params;
    try {
        await Content.destroy({ where: { id } });
        res.json({ message: '内容删除成功' });
    } catch (error) {
        res.status(500).json({ error: '删除内容失败' });
    }
});

// 通用的日志中间件
router.use((req, res, next) => {
    console.log('Admin 路由收到请求:', req.method, req.url);
    next();
});

// 图片上传路由
router.post('/upload-image', upload.single('image'), (req, res) => {
    if (req.file) {
        // 返回上传后的图片 URL
        res.json({ url: '/uploads/' + req.file.filename });
    } else {
        res.status(400).json({ error: '上传失败' });
    }
});

// 确保这个路由已经定义
router.put('/users/:id/points', async (req, res) => {
    console.log('收到更新积分请求:', req.params, req.body);
    try {
        const { id } = req.params;
        const { points } = req.body;

        // 验证积分是否为有效数字
        if (isNaN(points) || points < 0) {
            return res.status(400).json({ error: '无效的积分值' });
        }

        console.log(`尝试更新用户 ${id} 的积分为 ${points}`);

        const user = await User.findByPk(id);
        if (!user) {
            console.log(`未找到 ID 为 ${id} 的用户`);
            return res.status(404).json({ error: '未找到用户' });
        }

        console.log(`找到用户:`, user.toJSON());

        // 更新用户积分
        user.points = parseInt(points, 10);
        await user.save();

        console.log(`成功更新用户 ${id} 的积分为 ${points}`);
        res.json({ success: true, message: '积分更新成功', user: { id: user.id, username: user.username, points: user.points } });
    } catch (error) {
        console.error('更新用户积分时发生错误:', error);
        res.status(500).json({ error: '更新积分失败', details: error.message });
    }
});

module.exports = router;



    /Users/momo/Desktop/info-index/routes/homeRoutes.js的内容是:
      const express = require('express');
const router = express.Router();
const homeController = require('../controllers/homeController');
const { isLoggedIn } = require('../middlewares/auth');

// 添加一个中间件来记录 req.user
const logUser = (req, res, next) => {
  console.log('当前用户:', req.user);
  next();
};

// 在 isLoggedIn 中间件之后，homeController.getHomePage 之前添加 logUser 中间件
router.get('/', isLoggedIn, logUser, homeController.getHomePage);

module.exports = router;



    /Users/momo/Desktop/info-index/routes/userRoutes.js的内容是:
      const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');

router.get('/login', userController.getLoginPage);
router.get('/register', userController.getRegisterPage);
router.post('/api/users/register', userController.register);
router.post('/api/users/login', userController.login);
router.get('/logout', userController.logout);
router.get('/api/user/points', userController.getUserPoints);

module.exports = router;



  scripts/
    /Users/momo/Desktop/info-index/scripts/seedContent.js的内容是:
      const { sequelize } = require('../config/database');
const Content = require('../models/Content');

const seedContent = async () => {
  try {
    await sequelize.sync({ force: true }); // 警告：这将删除现有的内容表

    const contentData = [
      {
        simpleInfo: "[推荐]教授数学很有经验",
        preview: "/images/iceice/1.jpg",  // 注意这里的路径更改
        location: "海淀 五道口",
        price: 1000.0,
        area: "海淀",
        detail: [{
          type: 2,
          content: "/images/iceice/1.jpg"  // 这里也要更改
        }],
        commnet: ["1号老师很不错，很负责人"]
      },
      {
        simpleInfo: "[推荐]教授英语很有经验",
        preview: "/images/iceice/2.jpg",  // 注意这里的路径更改
        location: "海淀 五道口",
        price: 1000.0,
        area: "海淀",
        detail: [{
          type: 2,
          content: "/images/iceice/2.jpg"  // 这里也要更改
        }],
        commnet: ["2号老师很不错，很负责人"]
      }
    ];

    await Content.bulkCreate(contentData);

    console.log('内容数据已成功添加到数据库');
  } catch (error) {
    console.error('添加内容数据时出错:', error);
  } finally {
    await sequelize.close();
  }
};

seedContent();



  /Users/momo/Desktop/info-index/struct.py的内容是:
    import os
from pathlib import Path

def generate_project_structure(directory, output_file, file_types=None):
    exclude_dirs = {'.git', 'node_modules', 'build', 'dist', 'tmp', 'cache','.DS_Store','.env','.vscode'}
    exclude_files = {'.gitignore', 'package-lock.json', 'yarn.lock'}

    def should_include_file(file_path):
        if file_types is None:
            return True
        return file_path.suffix[1:] in file_types

    def traverse_directory(dir_path, prefix=''):
        output_file.write(f"{prefix}{dir_path.name}/\n")

        for item in sorted(dir_path.iterdir()):
            if item.is_dir():
                if item.name not in exclude_dirs:
                    traverse_directory(item, prefix + '  ')
            elif item.is_file():
                if item.name not in exclude_files and should_include_file(item):
                    output_file.write(f"{prefix}  {item.absolute()}的内容是:\n")
                    try:
                        with item.open('r', encoding='utf-8') as f:
                            content = f.read()
                            output_file.write(f"{prefix}    {content}\n")
                        output_file.write(f"\n\n")
                    except UnicodeDecodeError:
                        output_file.write(f"{prefix}    (跳过二进制文件)\n\n")

    with open('a.txt', 'w', encoding='utf-8') as output_file:
        traverse_directory(Path(directory))

if __name__ == "__main__":
    directory = '/Users/momo/Desktop/info-index'

    if not os.path.isdir(directory):
        print(f"目录 {directory} 不存在")
        exit(1)

    print("正在生成项目结构和完整内容...")
    generate_project_structure(directory,directory+'/a.txt')
    print("项目结构和完整内容已保存到 a.txt")



  /Users/momo/Desktop/info-index/test.json的内容是:
    {
	"code": 200,
	"data": [
		{
			"id": 1,
			"simpleInfo": "[推荐]教授数学很有经验",
			"preview": "iceice/1.jpg",
			"location": "海淀 五道口",
			"price": 1000.0,
			"area": "海淀",
			"detail": [{
				"type": 2,
				"content": "iceice/1.jpg "
			}],
			"commnet": ["1号老师很不错，很负责人"]
		},
		{
			"id": 2,
			"simpleInfo": "[推荐]教授英语很有经验",
			"preview": "iceice/2.jpg",
			"location": "海淀 五道口",
			"price": 1000.0,
			"area": "海淀",
			"detail": [{
				"type": 2,
				"content": "iceice/1.jpg "
			}],
			"commnet": ["2号老师很不错，很负责人"]
		}
	]
}


  views/
    admin/
      /Users/momo/Desktop/info-index/views/admin/content-form.ejs的内容是:
        <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= contentId ? '编辑内容' : '添加新内容' %></title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #2c3e50;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-top: 10px;
            font-weight: bold;
        }
        input[type="text"],
        input[type="number"],
        input[type="file"] {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        #detailEditor {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            margin-top: 5px;
            min-height: 100px;
        }
        button {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 10px 15px;
            margin-top: 10px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .commentItem {
            display: flex;
            margin-top: 5px;
        }
        .commentItem input {
            flex-grow: 1;
            margin-right: 5px;
        }
        #previewImage {
            max-width: 200px;
            margin-top: 10px;
        }

        .button-group {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.1s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-primary {
            background-color: #3498db;
            color: #fff;
        }

        .btn-primary:hover {
            background-color: #2980b9;
        }

        .btn-secondary {
            background-color: #95a5a6;
            color: #fff;
        }

        .btn-secondary:hover {
            background-color: #7f8c8d;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><%= contentId ? '编辑内容' : '添加新内容' %></h1>
        <form id="contentForm" enctype="multipart/form-data">
            <input type="hidden" id="contentId" value="<%= contentId || '' %>">
            <div>
                <label for="simpleInfo">简介:</label>
                <input type="text" id="simpleInfo" name="simpleInfo" required>
            </div>
            <div>
                <label for="preview">预览:</label>
                <input type="file" id="preview" name="preview" accept="image/*" <%= contentId ? '' : 'required' %>>
                <% if (contentId) { %>
                    <img id="previewImage" src="" alt="当前预览图" style="max-width:200px;">
                <% } %>
            </div>
            <div>
                <label for="location">位置:</label>
                <input type="text" id="location" name="location" required>
            </div>
            <div>
                <label for="price">价格:</label>
                <input type="number" id="price" name="price" required>
            </div>
            <div>
                <label for="area">区域:</label>
                <input type="text" id="area" name="area" required>
            </div>
            <div>
                <label for="detailEditor">详细信息:</label>
                <div id="detailEditor" contenteditable="true"></div>
                <input type="file" id="detailImage" accept="image/*">
                <button type="button" onclick="insertImage()">插入图片</button>
            </div>
            <div>
                <label for="commentList">评论:</label>
                <div id="commentList"></div>
                <button type="button" onclick="addCommentInput()">添加评论</button>
            </div>
            <div class="button-group">
                <button type="button" class="btn btn-secondary" onclick="window.close()">返回</button>
                <button type="submit" class="btn btn-primary"><%= contentId ? '更新内容' : '添加内容' %></button>
            </div>
        </form>
    </div>

    <script>
        const contentId = document.getElementById('contentId').value;

        // 如果是编辑模式,加载现有内容
        if (contentId) {
            fetch(`/admin/content/${contentId}`)
                .then(response => response.json())
                .then(content => {
                    document.getElementById('simpleInfo').value = content.simpleInfo;
                    document.getElementById('location').value = content.location;
                    document.getElementById('price').value = content.price;
                    document.getElementById('area').value = content.area;
                    document.getElementById('detailEditor').innerHTML = JSON.parse(content.detail);
                    document.getElementById('previewImage').src = content.preview;
                    
                    const comments = JSON.parse(content.commnet);
                    comments.forEach(comment => addCommentInput(comment));
                });
        }

        function insertImage() {
            const input = document.getElementById('detailImage');
            const file = input.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('image', file);

                // 显示上传进度
                const progressBar = document.createElement('div');
                progressBar.style.width = '0%';
                progressBar.style.height = '5px';
                progressBar.style.backgroundColor = 'blue';
                document.getElementById('detailEditor').appendChild(progressBar);

                fetch('/admin/upload-image', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.url) {
                        const img = document.createElement('img');
                        img.src = data.url;
                        img.style.maxWidth = '100%';
                        document.getElementById('detailEditor').appendChild(img);
                    } else {
                        alert('图片上传失败');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('图片上传失败');
                })
                .finally(() => {
                    // 移除进度条
                    progressBar.remove();
                });
            }
        }

        function addCommentInput(value = '') {
            const commentList = document.getElementById('commentList');
            const commentItem = document.createElement('div');
            commentItem.className = 'commentItem';
            commentItem.innerHTML = `
                <input type="text" value="${value}" placeholder="输入评论">
                <button type="button" onclick="this.parentElement.remove()">删除</button>
            `;
            commentList.appendChild(commentItem);
        }

        document.getElementById('contentForm').onsubmit = function(e) {
            e.preventDefault();
            const formData = new FormData(this);

            // 处理详情
            const detailEditor = document.getElementById('detailEditor');
            formData.set('detail', detailEditor.innerHTML);  // 直接设置 HTML 内容，不使用 JSON.stringify

            // 处理评论
            const comments = Array.from(document.querySelectorAll('#commentList input'))
                .map(input => input.value)
                .filter(comment => comment.trim() !== '');
            formData.set('commnet', JSON.stringify(comments));  // 评论仍然需要 JSON.stringify，因为它是一个数组

            const url = contentId ? `/admin/content/${contentId}` : '/admin/content';
            const method = contentId ? 'PUT' : 'POST';

            fetch(url, { method, body: formData })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        if (contentId) {
                            // 更新成功，关闭页面
                            alert('内容更新成功');
                            window.opener.location.reload(); // 刷新父窗口
                            window.close(); // 关闭当前窗口
                        } else {
                            // 添加成功，清除表单
                            alert('内容添加成功');
                            clearForm();
                            window.opener.location.reload(); // 刷新父窗口
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        };

        // 添加清除表单的函数
        function clearForm() {
            document.getElementById('simpleInfo').value = '';
            document.getElementById('preview').value = '';
            document.getElementById('location').value = '';
            document.getElementById('price').value = '';
            document.getElementById('area').value = '';
            document.getElementById('detailEditor').innerHTML = '';
            document.getElementById('commentList').innerHTML = '';
            if (document.getElementById('previewImage')) {
                document.getElementById('previewImage').src = '';
            }
        }
    </script>
</body>
</html>


      /Users/momo/Desktop/info-index/views/admin/content.ejs的内容是:
        <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>内容管理</title>
    <style>
        /* 添加一些基本样式 */
    </style>
</head>
<body>
    <h1>内容管理</h1>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>简介</th>
                <th>价格</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            <% content.forEach(item => { %>
                <tr>
                    <td><%= item.id %></td>
                    <td><%= item.simpleInfo %></td>
                    <td><%= item.price %></td>
                    <td>
                        <button onclick="editContent(<%= item.id %>)">编辑</button>
                        <button onclick="deleteContent(<%= item.id %>)">删除</button>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
    <form id="addContentForm">
        <!-- 添加内容表单字段 -->
    </form>
    <script>
        // 实现添加、编辑和删除内容的前端 JavaScript
    </script>
</body>
</html>



      /Users/momo/Desktop/info-index/views/admin/dashboard.ejs的内容是:
        <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>管理员仪表板</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        h1, h2 {
            color: #333;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .section {
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
        }
        button:hover {
            background-color: #45a049;
        }
        form {
            margin-top: 20px;
        }
        input[type="text"], input[type="email"], input[type="number"], input[type="password"], select {
            width: 100%;
            padding: 8px;
            margin: 5px 0;
            display: inline-block;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            .section {
                width: 100%;
            }
            table {
                font-size: 14px;
            }
            th, td {
                padding: 8px 5px;
            }
            button {
                padding: 8px 12px;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <h1>管理员仪表板</h1>
    <div class="container">
        <div class="section">
            <h2>用户管理</h2>
            <div style="overflow-x: auto;">
                <table id="userTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>用户名</th>
                            <th>角色</th>
                            <th>积分</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- 用户数据将通过 JavaScript 动态加载 -->
                    </tbody>
                </table>
            </div>
            <form id="addUserForm">
                <h3>添加新用户</h3>
                <input type="text" id="username" placeholder="用户名" required>
                <select id="role" required>
                    <option value="">选择角色</option>
                    <option value="user">普通用户</option>
                    <option value="admin">管理员</option>
                </select>
                <input type="password" id="password" placeholder="密码" required>
                <input type="submit" value="添加用户">
            </form>
        </div>
        <div class="section">
            <h2>内容管理</h2>
            <button onclick="location.href='/admin/content/add'">添加新内容</button>
            <div style="overflow-x: auto;">
                <table id="contentTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>简介</th>
                            <th>预览</th>
                            <th>位置</th>
                            <th>价格</th>
                            <th>区域</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- 内容数据将通过 JavaScript 动态加载 -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // 加载用户数据
        function loadUsers() {
            fetch('/admin/users')
                .then(response => response.json())
                .then(users => {
                    const tbody = document.querySelector('#userTable tbody');
                    tbody.innerHTML = '';
                    users.forEach(user => {
                        tbody.innerHTML += `
                            <tr>
                                <td>${user.id}</td>
                                <td>${user.username}</td>
                                <td>${user.role}</td>
                                <td>
                                    <span id="points-${user.id}">${user.points}</span>
                                    <input type="number" id="edit-points-${user.id}" style="display:none;">
                                    <button onclick="editPoints(${user.id})">编辑</button>
                                    <button onclick="savePoints(${user.id})" style="display:none;">保存</button>
                                </td>
                                <td><button onclick="deleteUser(${user.id})">删除</button></td>
                            </tr>
                        `;
                    });
                })
                .catch(error => console.error('Error loading users:', error));
        }

        // 编辑积分
        function editPoints(userId) {
            const pointsSpan = document.getElementById(`points-${userId}`);
            const pointsInput = document.getElementById(`edit-points-${userId}`);
            const editButton = pointsSpan.nextElementSibling.nextElementSibling;
            const saveButton = editButton.nextElementSibling;

            pointsSpan.style.display = 'none';
            pointsInput.style.display = 'inline';
            pointsInput.value = pointsSpan.textContent;
            editButton.style.display = 'none';
            saveButton.style.display = 'inline';
        }

        // 保存积分
        function savePoints(userId) {
            const pointsInput = document.getElementById(`edit-points-${userId}`);
            const newPoints = pointsInput.value;

            console.log(`尝试更新用户 ${userId} 的积分为 ${newPoints}`);

            fetch(`/admin/users/${userId}/points`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ points: newPoints }),
            })
            .then(response => {
                console.log('服务器响应状态:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('服务器响应数据:', data);
                if (data.success) {
                    console.log(`成功更新用户 ${userId} 的积分为 ${newPoints}`);
                    loadUsers();  // 重新加载用户列表
                } else {
                    console.error('更新积分失败:', data.error);
                    alert('更新积分失败: ' + (data.error || '未知错误'));
                }
            })
            .catch(error => {
                console.error('更新积分时发生错误:', error);
                alert('更新积分失败: ' + error.message);
            });
        }

        // 修改加载内容的函数
        function loadContent() {
            console.log('开始加载内容');
            fetch('/admin/content')
                .then(response => {
                    console.log('收到响应:', response);
                    return response.json();
                })
                .then(content => {
                    console.log('解析后的内容:', content);
                    const tbody = document.querySelector('#contentTable tbody');
                    tbody.innerHTML = '';
                    if (Array.isArray(content) && content.length > 0) {
                        content.forEach(item => {
                            console.log('处理项目:', item);
                            tbody.innerHTML += `
                                <tr>
                                    <td>${item.id}</td>
                                    <td>${item.simpleInfo || ''}</td>
                                    <td>${item.preview ? '<img src="' + item.preview + '" alt="预览图" style="max-width:100px; max-height:100px;">' : '无预览图'}</td>
                                    <td>${item.location || ''}</td>
                                    <td>${item.price || ''}</td>
                                    <td>${item.area || ''}</td>
                                    <td>
                                        <button onclick="window.open('/admin/content/edit/${item.id}', '_blank')">编辑</button>
                                        <button onclick="deleteContent(${item.id})">删除</button>
                                        <div>详情: ${item.detail ? item.detail.substring(0, 50) : 'N/A'}...</div>
                                        <div>评论数: ${item.commnet ? JSON.parse(item.commnet).length : 0}</div>
                                    </td>
                                </tr>
                            `;
                        });
                    } else {
                        console.log('没有内容或内容不是数组');
                        tbody.innerHTML = '<tr><td colspan="7">没有找到内容</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('加载内容时出错:', error);
                    const tbody = document.querySelector('#contentTable tbody');
                    tbody.innerHTML = `<tr><td colspan="7">加载内容时出错: ${error.message}</td></tr>`;
                });
        }

        // 确保在页面加载完成后调用 loadContent
        document.addEventListener('DOMContentLoaded', loadContent);

        // 删除用户
        function deleteUser(id) {
            if (confirm('确定要删除这个用户吗？')) {
                fetch(`/admin/users/${id}`, { method: 'DELETE' })
                    .then(() => loadUsers());
            }
        }

        // 删除内容
        function deleteContent(id) {
            if (confirm('确定要删除这个内容吗？')) {
                fetch(`/admin/content/${id}`, { method: 'DELETE' })
                    .then(() => loadContent());
            }
        }

        // 添加用户
        document.getElementById('addUserForm').onsubmit = function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const role = document.getElementById('role').value;
            const password = document.getElementById('password').value;
            fetch('/admin/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, role, password })
            }).then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    loadUsers();
                    this.reset();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('添加用户失败');
            });
        };

        // 初始加载数据
        loadUsers();
        loadContent();
    </script>
</body>
</html>



      /Users/momo/Desktop/info-index/views/admin/users.ejs的内容是:
        <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>用户管理</title>
    <style>
        /* 添加一些基本样式 */
    </style>
</head>
<body>
    <h1>用户管理</h1>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>用户名</th>
                <th>邮箱</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            <% users.forEach(user => { %>
                <tr>
                    <td><%= user.id %></td>
                    <td><%= user.username %></td>
                    <td><%= user.email %></td>
                    <td>
                        <button onclick="deleteUser(<%= user.id %>)">删除</button>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
    <form id="addUserForm">
        <!-- 添加用户表单字段 -->
    </form>
    <script>
        // 实现添加和删除用户的前端 JavaScript
    </script>
</body>
</html>



    /Users/momo/Desktop/info-index/views/error.ejs的内容是:
      <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>错误 - <%= status || '未知错误' %></title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            color: #333;
            line-height: 1.6;
            padding: 20px;
            text-align: center;
        }
        .error-container {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            max-width: 600px;
            margin: 50px auto;
        }
        h1 {
            color: #d9534f;
            margin-bottom: 20px;
        }
        .error-details {
            margin-bottom: 20px;
            font-size: 18px;
        }
        .back-link {
            display: inline-block;
            background-color: #5bc0de;
            color: #fff;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 3px;
            transition: background-color 0.3s;
        }
        .back-link:hover {
            background-color: #31b0d5;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <h1>错误 <%= status || '未知错误' %></h1>
        <div class="error-details">
            <p><%= message %></p>
        </div>
        <% if (error && error.stack) { %>
            <pre><%= error.stack %></pre>
        <% } %>
        <a href="/" class="back-link">返回首页</a>
    </div>
</body>
</html>



    /Users/momo/Desktop/info-index/views/home.ejs的内容是:
      <!DOCTYPE html>
<html lang="zh">

<script>
var _hmt = _hmt || [];
(function() {
    var hm = document.createElement("script");
    hm.src = "https://hm.baidu.com/hm.js?2472ef3603b334b2cdc8d2109cd5c9ab";
    var s = document.getElementsByTagName("script")[0]; 
    s.parentNode.insertBefore(hm, s);
})();
</script>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .main-content {
            width: 100%;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 20px;
            padding: 20px 0;
        }
        .title {
            font-size: 24px;
            margin: 0;
            margin-right: 20px;
        }
        .search-bar {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-grow: 1;
            justify-content: center;
        }
        #search-input {
            flex-grow: 1;
            max-width: 300px;
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 14px;
        }
        #sort-button, #area-filter {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            background-color: white;
            cursor: pointer;
            font-size: 14px;
        }
        .user-info {
            margin-left: 20px;
            font-size: 14px;
            white-space: nowrap;
        }
        .user-info a {
            color: #3498db;
            text-decoration: none;
            margin-left: 10px;
        }
        .user-info a:hover {
            text-decoration: underline;
        }
        .card-list {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            justify-content: center;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
            cursor: pointer;
            transition: 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .card-cover-container {
            width: 100%;
            padding-top: 75%; /* 4:3 宽高比 */
            position: relative;
            overflow: hidden;
        }
        .card-cover {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .card-content {
            padding: 15px;
        }
        .card-number {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .card-description {
            font-size: 14px;
            margin-bottom: 5px;
        }
        .card-price {
            color: #e74c3c;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .card-area {
            font-size: 12px;
            color: #7f8c8d;
        }
        .detail-page {
            position: fixed;
            top: 0;
            right: -33.33%;
            width: 33.33%;
            height: 100%;
            background-color: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            overflow-y: auto;
            transition: 0.3s;
            padding: 20px;
            box-sizing: border-box;
            z-index: 1000;
        }
        .detail-page.open {
            right: 0;
        }
        .detail-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: none;
            z-index: 999;
        }
        .overlay.open {
            display: block;
        }
        
        @media (max-width: 768px) {
            .card-list {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }
            .header {
                flex-direction: column;
                align-items: stretch;
            }
            .title {
                margin-bottom: 15px;
                text-align: center;
            }
            .search-bar {
                margin-bottom: 15px;
            }
            .user-info {
                margin-left: 0;
                text-align: center;
            }
            .detail-page {
                width: 100%;
                right: -100%;
            }
        }

        /* 添加新的样式 */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 300px;
            border-radius: 5px;
            text-align: center;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .user-link {
            color: #3498db;
            text-decoration: none;
            cursor: pointer;
        }

        .user-link:hover {
            text-decoration: underline;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="main-content">
            <div class="header">
                <h1 class="title">老师信息大全</h1>
                <div class="search-bar">
                    <input type="text" id="search-input" placeholder="搜索...">
                    <button id="sort-button">
                        <span id="sort-icon">↑↓</span>
                        编号
                    </button>
                    <select id="area-filter">
                        <option value="">所有地</option>
                    </select>
                </div>
                <% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
                    <div class="user-info">
                        欢迎, <%= user.username %> | <a href="/logout">登出</a> | <a href="/admin">管理页面</a>
                    </div>
                <% } else if (typeof user !== 'undefined' && user) { %>
                    <div class="user-info">
                        欢迎, <a href="#" class="user-link" onclick="showUserPoints()"><%= user.username %></a> | <a href="/logout">登出</a>
                    </div>
                <% } else { %>
                    <div class="user-info">
                        <a href="/login">登录</a> | <a href="/register">注册</a>
                    </div>
                <% } %>
            </div>
            <div class="card-list" id="card-container"></div>
        </div>
    </div>
    
    <div class="overlay" id="overlay"></div>
    <div class="detail-page" id="detail-page">
        <span class="detail-close" onclick="closeDetail()">&times;</span>
        <div id="detail-content"></div>
    </div>

    <!-- 用户积分模态框 -->
    <div id="userPointsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeUserPointsModal()">&times;</span>
            <h2>用户积分</h2>
            <p>您当前的积分: <span id="userPointsDisplay"></span></p>
        </div>
    </div>

    <script>
        let cardData = <%- JSON.stringify(content.data) %>;
        let sortAscending = true;
        let isDetailOpen = false;

        function populateAreaFilter() {
            const areaFilter = document.getElementById('area-filter');
            const areas = [...new Set(cardData.map(card => card.area))];
            areas.forEach(area => {
                const option = document.createElement('option');
                option.value = area;
                option.textContent = area;
                areaFilter.appendChild(option);
            });
        }

        function renderCards(cards) {
            const container = document.getElementById('card-container');
            container.innerHTML = '';
            cards.forEach(card => {
                const cardElement = document.createElement('div');
                cardElement.className = 'card';
                cardElement.innerHTML = `
                    <div class="card-cover-container">
                        <img src="${card.preview}" alt="卡片${card.id}封面" class="card-cover">
                    </div>
                    <div class="card-content">
                        <div class="card-number">编号：${card.id}</div>
                        <div class="card-description">${card.simpleInfo}</div>
                        <div class="card-price">￥${card.price.toFixed(2)}</div>
                        <div class="card-area">地区：${card.location}</div>
                    </div>
                `;
                cardElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    openDetail(card);
                });
                container.appendChild(cardElement);
            });
        }

        function filterAndSortCards() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const selectedArea = document.getElementById('area-filter').value;
            let filteredCards = cardData.filter(card => 
                (card.simpleInfo.toLowerCase().includes(searchTerm) || card.id.toString().includes(searchTerm)) &&
                (selectedArea === '' || card.area === selectedArea)
            );
            
            filteredCards.sort((a, b) => {
                if (sortAscending) {
                    return a.id - b.id;
                } else {
                    return b.id - a.id;
                }
            });

            renderCards(filteredCards);
        }

        function openDetail(card) {
            const detailPage = document.getElementById('detail-page');
            const overlay = document.getElementById('overlay');
            const detailContent = document.getElementById('detail-content');
            
            let detailHtml = `
                <h2>编号${card.id}</h2>
                <img src="${card.preview}" alt="预览图" style="width: 100%; height: auto; object-fit: cover; margin-bottom: 15px;">
                <p><strong>简介：</strong> ${card.simpleInfo}</p>
                <p><strong>价格：</strong> ￥${card.price.toFixed(2)}</p>
                <p><strong>地区：</strong> ${card.location}</p>
                <p><strong>详情：</strong></p>
                <div>${card.detail}</div>
            `;

            detailHtml += `
                <div class="comment-list">
                    <h3>评论</h3>
                    ${Array.isArray(card.commnet) ? card.commnet.map(comment => `<div class="comment">${comment}</div>`).join('') : '暂无评论'}
                </div>
            `;

            // 使用 DOMPurify 清理 HTML（如果已引入）
            if (typeof DOMPurify !== 'undefined') {
                detailHtml = DOMPurify.sanitize(detailHtml);
            }

            detailContent.innerHTML = detailHtml;
            detailPage.classList.add('open');
            overlay.classList.add('open');
            
            if (!isDetailOpen) {
                history.pushState({ isDetail: true }, '');
                isDetailOpen = true;
            }

            // 手动发送 PV 统计
            if (window._hmt) {
                _hmt.push(['_trackPageview', '/detail/' + card.id]);
            }
        }

        function closeDetail() {
            const detailPage = document.getElementById('detail-page');
            const overlay = document.getElementById('overlay');
            detailPage.classList.remove('open');
            overlay.classList.remove('open');

            if (isDetailOpen) {
                history.back();
                isDetailOpen = false;
            }
        }

        function toggleSort() {
            sortAscending = !sortAscending;
            document.getElementById('sort-icon').textContent = sortAscending ? '↑↓' : '↓↑';
            filterAndSortCards();
        }

        // 添加新的函数来显示和关闭用户积分模态框
        function showUserPoints() {
            fetch('/api/user/points')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('userPointsDisplay').textContent = data.points;
                    document.getElementById('userPointsModal').style.display = 'block';
                })
                .catch(error => console.error('Error fetching user points:', error));
        }

        function closeUserPointsModal() {
            document.getElementById('userPointsModal').style.display = 'none';
        }

        // 点击模态框外部时关闭模态框
        window.onclick = function(event) {
            var modal = document.getElementById('userPointsModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            populateAreaFilter();
            filterAndSortCards();

            document.getElementById('search-input').addEventListener('input', filterAndSortCards);
            document.getElementById('area-filter').addEventListener('change', filterAndSortCards);
            document.getElementById('sort-button').addEventListener('click', toggleSort);

            document.addEventListener('click', function(event) {
                const detailPage = document.getElementById('detail-page');
                if (detailPage.classList.contains('open') && !detailPage.contains(event.target)) {
                    closeDetail();
                }
            });

            document.getElementById('detail-page').addEventListener('click', function(event) {
                event.stopPropagation();
            });

            document.getElementById('overlay').addEventListener('click', closeDetail);

            window.addEventListener('popstate', function(event) {
                if (event.state && event.state.isDetail) {
                    // 如果是详情页状态，不做任何操作
                } else {
                    // 如果不是详情页状态，关闭详情页
                    const detailPage = document.getElementById('detail-page');
                    const overlay = document.getElementById('overlay');
                    if (detailPage.classList.contains('open')) {
                        detailPage.classList.remove('open');
                        overlay.classList.remove('open');
                        isDetailOpen = false;
                    }
                }
            });

            // 检查 URL 中是否有 id 参数
            const idParam = new URLSearchParams(window.location.search).get('id');
            if (idParam) {
                const card = cardData.find(card => card.id.toString() === idParam);
                if (card) {
                    openDetail(card);
                } else {
                    console.log('未找到对应 ID 的卡片');
                }
            }
        });
    </script>
</body>
</html>



    /Users/momo/Desktop/info-index/views/login.ejs的内容是:
      <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>登录</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }
        .logo {
            margin-bottom: 30px;
            max-width: 250px; /* 增大 logo 的最大宽度 */
            width: 80%; /* 使 logo 在小屏幕上也能自适应 */
            height: auto;
        }
        .login-container {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 350px; /* 稍微增加容器宽度 */
        }
        h1 {
            text-align: center;
            color: #1877f2;
            margin-bottom: 1.5rem;
        }
        form div {
            margin-bottom: 1rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #606770;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #dddfe2;
            border-radius: 4px;
            font-size: 1rem;
        }
        button {
            width: 100%;
            padding: 0.5rem;
            background-color: #1877f2;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #166fe5;
        }
        .message {
            text-align: center;
            margin-top: 1rem;
        }
        .error {
            color: #ff0000;
        }
        .success {
            color: #00a400;
        }
    </style>
</head>
<body>
    <img src="/images/logo.png" alt="网站Logo" class="logo">
    <div class="login-container">
        <h1>登录</h1>
        <% if (locals.registered) { %>
            <p class="message success">注册成功，请登录</p>
        <% } %>
        <% if (locals.error) { %>
            <p class="message error"><%= error %></p>
        <% } %>
        <form action="/api/users/login" method="POST">
            <div>
                <label for="username">用户名：</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div>
                <label for="password">密码：</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">登录</button>
        </form>
        <!-- <p class="message">还没有账号？<a href="/register">注册</a></p> -->
    </div>
</body>
</html>



    /Users/momo/Desktop/info-index/views/register.ejs的内容是:
      <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>注册</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }
        .logo {
            margin-bottom: 20px;
            max-width: 150px;
            height: auto;
        }
        .register-container {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 300px;
        }
        h1 {
            text-align: center;
            color: #1877f2;
            margin-bottom: 1.5rem;
        }
        form div {
            margin-bottom: 1rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #606770;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #dddfe2;
            border-radius: 4px;
            font-size: 1rem;
        }
        button {
            width: 100%;
            padding: 0.5rem;
            background-color: #1877f2;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #166fe5;
        }
        .message {
            text-align: center;
            margin-top: 1rem;
        }
        .error {
            color: #ff0000;
        }
        .success {
            color: #00a400;
        }
    </style>
</head>
<body>
    <img src="/images/logo.png" alt="网站Logo" class="logo">
    <div class="register-container">
        <h1>注册</h1>
        <% if (locals.error) { %>
            <p class="message error"><%= error %></p>
        <% } %>
        <form action="/api/users/register" method="POST">
            <div>
                <label for="username">用户名：</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div>
                <label for="password">密码：</label>
                <input type="password" id="password" name="password" required>
            </div>
            <!-- <button type="submit">注册</button> -->
        </form>
        <p class="message">已有账号？<a href="/login">登录</a></p>
    </div>
</body>
</html>



